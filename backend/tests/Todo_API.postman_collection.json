{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Todo API Tests",
    "description": "API tests for Todo application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "itemId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set(\"token\", jsonData.token);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.email).to.eql(\"test@example.com\");",
                  "    pm.expect(jsonData.user.name).to.eql(\"Test User\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": ["{{baseUrl}}"],
              "path": ["register"]
            },
            "description": "Register a new user"
          },
          "response": []
        },
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set(\"token\", jsonData.token);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.email).to.eql(\"test@example.com\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Login with valid credentials"
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "    pm.expect(jsonData.message).to.include(\"Invalid credentials\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Login with invalid credentials"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.eql(\"test@example.com\");",
                  "    pm.expect(jsonData.name).to.eql(\"Test User\");",
                  "});",
                  "",
                  "pm.test(\"Response does not include password\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.password).to.not.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/me",
              "host": ["{{baseUrl}}"],
              "path": ["me"]
            },
            "description": "Get current user information"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Items",
      "item": [
        {
          "name": "Get All Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/items",
              "host": ["{{baseUrl}}"],
              "path": ["items"]
            },
            "description": "Get all items for the current user"
          },
          "response": []
        },
        {
          "name": "Create Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.text).to.eql(\"Test Todo Item\");",
                  "    pm.expect(jsonData.completed).to.eql(false);",
                  "    pm.expect(jsonData._id).to.exist;",
                  "    pm.collectionVariables.set(\"itemId\", jsonData._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Test Todo Item\",\n    \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/items",
              "host": ["{{baseUrl}}"],
              "path": ["items"]
            },
            "description": "Create a new item"
          },
          "response": []
        },
        {
          "name": "Create Item - Invalid Input",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "    pm.expect(jsonData.message).to.include(\"Text is required\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"\",\n    \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/items",
              "host": ["{{baseUrl}}"],
              "path": ["items"]
            },
            "description": "Create a new item with invalid input"
          },
          "response": []
        },
        {
          "name": "Get Item by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.text).to.eql(\"Test Todo Item\");",
                  "    pm.expect(jsonData._id).to.eql(pm.collectionVariables.get(\"itemId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/items/{{itemId}}",
              "host": ["{{baseUrl}}"],
              "path": ["items", "{{itemId}}"]
            },
            "description": "Get item by ID"
          },
          "response": []
        },
        {
          "name": "Update Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.text).to.eql(\"Updated Todo Item\");",
                  "    pm.expect(jsonData.completed).to.eql(true);",
                  "    pm.expect(jsonData._id).to.eql(pm.collectionVariables.get(\"itemId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Updated Todo Item\",\n    \"completed\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/items/{{itemId}}",
              "host": ["{{baseUrl}}"],
              "path": ["items", "{{itemId}}"]
            },
            "description": "Update an item"
          },
          "response": []
        },
        {
          "name": "Update Item - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "    pm.expect(jsonData.message).to.include(\"Item not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Updated Todo Item\",\n    \"completed\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/items/60d21b4667d0d8992e610c85",
              "host": ["{{baseUrl}}"],
              "path": ["items", "60d21b4667d0d8992e610c85"]
            },
            "description": "Update a non-existent item"
          },
          "response": []
        },
        {
          "name": "Delete Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "    pm.expect(jsonData.message).to.include(\"Item removed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/items/{{itemId}}",
              "host": ["{{baseUrl}}"],
              "path": ["items", "{{itemId}}"]
            },
            "description": "Delete an item"
          },
          "response": []
        },
        {
          "name": "Delete Item - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "    pm.expect(jsonData.message).to.include(\"Item not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/items/60d21b4667d0d8992e610c85",
              "host": ["{{baseUrl}}"],
              "path": ["items", "60d21b4667d0d8992e610c85"]
            },
            "description": "Delete a non-existent item"
          },
          "response": []
        }
      ]
    }
  ]
}